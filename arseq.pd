#N canvas 853 137 489 450 12;
#N canvas 641 343 369 188 (subpatch) 0;
#X array \$0-array 16 float 2;
#X coords 0 1 16 -1 130 60 1 0 0;
#X restore 170 120 graph;
#X obj 13 323 *~;
#X obj 13 155 i;
#X obj 13 179 + 1;
#X obj 45 179 r \$0-arsize;
#X obj 13 203 mod, f 5;
#X floatatom 278 102 4 1 16 1 - \$0-arsizeinit \$0-arsize 8;
#N canvas 266 304 126 165 env 0;
#X obj 9 86 vline~;
#X obj 9 110 pow~ 2;
#X obj 9 11 inlet;
#X obj 9 134 outlet~;
#X msg 9 63 1 0 \, 0 \$1 5;
#X obj 9 38 f 499, f 7;
#X obj 55 11 r \$0-dec;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 2 0 5 0;
#X connect 4 0 0 0;
#X connect 5 0 4 0;
#X connect 6 0 5 1;
#X restore 45 251 pd env;
#X obj 13 422 outlet~;
#X floatatom 242 190 4 0 5 1 Env\ Amp \$0-ampdis \$0-amp 8;
#X floatatom 242 209 4 49 999 1 Env\ Dec \$0-decdis \$0-dec 8;
#X obj 173 189 hsl 60 15 0 15 0 0 \$0-ampdis \$0-ampinit empty 53 7 0 8 #fcfcfc #000000 #000000 0 1;
#X obj 31 347 r \$0-amp;
#X obj 230 102 bng 14 250 50 0 \$0-rndmout \$0-rndm empty 5 8 0 10 #fcfcfc #000000 #000000;
#X obj 335 13 loadbang;
#X obj 335 36 f \$0;
#X obj 96 256 tgl 19 0 empty \$0-envonoff empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 13 395 *~;
#X obj 45 275 *~;
#X obj 96 280 == 0;
#X obj 221 209 tgl 14 0 \$0-envonoff \$0-envonoffinit empty -37 6 0 8 #fcfcfc #000000 #000000 0 1;
#X obj 13 13 inlet Bang;
#X obj 97 13 inlet Preset;
#X obj 23 37 t b b;
#X obj 23 61 timer;
#X floatatom 23 85 5 0 0 0 - - - 0;
#X obj 23 107 s \$0-decdis;
#X obj 195 13 inlet Array Preset;
#X obj 195 37 s \$0-arraypres;
#N canvas 145 412 999 252 setarray 0;
#X obj 161 90 pack;
#X obj 143 17 r \$0-arsize;
#X msg 161 114 \; \$1-array bounds 0 1 \$2 -1 \; \$1-array yticks 0 0.1 5 \; \$1-array xticks 0 1 2 \; \$1-array resize \$2;
#X obj 9 40 list split 1;
#X obj 24 139 array set \$0-array;
#X obj 24 114 list;
#X obj 24 90 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 9 64 s \$0-arsizeinit;
#X obj 9 17 r \$0-arraypres;
#X obj 143 40 t b b f f f;
#X obj 161 64 f \$0;
#X obj 591 171 expr ((random(-1000 \, 1000)*0.001)+(random(-1000 \, 1000)*0.001)+(random(-1000 \, 1000)*0.001)+(random(-1000 \, 1000)*0.001))/4;
#X obj 366 101 until;
#X obj 482 10 i;
#X obj 482 34 + 1;
#X obj 398 78 sel 0;
#X obj 366 125 t b b;
#X obj 366 171 expr random(-1000 \, 1000)*0.001;
#X obj 482 59 mod;
#X obj 366 59 f;
#X obj 366 218 tabwrite \$0-array;
#X obj 366 35 r \$0-rndmout;
#X text 919 151 Gaussian;
#X obj 649 64 r \$0-gn;
#X obj 479 107 expr if($f1==0 \, 1 \, 0) \; if($f1== 1 \, 1 \, 0);
#X obj 366 149 spigot;
#X obj 591 144 spigot;
#X obj 649 88 t b f;
#X obj 649 112 s \$0-rndm;
#X connect 0 0 2 0;
#X connect 1 0 9 0;
#X connect 3 0 7 0;
#X connect 3 1 5 1;
#X connect 5 0 4 0;
#X connect 6 0 5 0;
#X connect 8 0 3 0;
#X connect 9 0 6 0;
#X connect 9 1 10 0;
#X connect 9 2 0 1;
#X connect 9 3 19 1;
#X connect 9 4 18 1;
#X connect 10 0 0 0;
#X connect 11 0 20 0;
#X connect 12 0 16 0;
#X connect 13 0 14 0;
#X connect 14 0 18 0;
#X connect 15 0 12 1;
#X connect 16 0 25 0;
#X connect 16 0 26 0;
#X connect 16 1 13 0;
#X connect 17 0 20 0;
#X connect 18 0 13 1;
#X connect 18 0 15 0;
#X connect 18 0 20 1;
#X connect 19 0 12 0;
#X connect 21 0 19 0;
#X connect 23 0 27 0;
#X connect 24 0 25 1;
#X connect 24 1 26 1;
#X connect 25 0 17 0;
#X connect 26 0 11 0;
#X connect 27 0 28 0;
#X connect 27 1 24 0;
#X restore 335 163 pd setarray;
#X obj 170 209 bng 14 250 50 0 \$0-printout \$0-printinit Prnt 17 6 0 8 #fcfcfc #000000 #000000;
#X obj 31 371 lop~ 1;
#X obj 13 227 tabread4~ \$0-array;
#X obj 13 131 t b b;
#N canvas 956 304 251 167 inlpreset 0;
#X obj 14 83 s \$0-ampinit;
#X obj 95 129 s \$0-arsizeinit;
#X obj 54 106 s \$0-envonoffinit;
#X obj 110 59 s \$0-rndm;
#X obj 14 59 unpack f f f;
#X obj 14 35 route list bang, f 28;
#X obj 14 10 inlet;
#X connect 4 0 0 0;
#X connect 4 1 2 0;
#X connect 4 2 1 0;
#X connect 5 0 4 0;
#X connect 5 1 3 0;
#X connect 6 0 5 0;
#X restore 97 37 pd inlpreset;
#X obj 247 102 hradio 14 1 0 2 \$0-gn \$0-gninit N\ \ G 4 8 0 9 #fcfcfc #000000 #000000 0;
#X msg 335 64 \; \$1-arsizeinit 6 \; \$1-ampinit 0.6 \; \$1-envonoffinit 1 \; \$1-gninit 1 \; \$1-rndm bang;
#X text 194 72 == ARSEQ ==;
#N canvas 557 250 192 175 printer 0;
#X obj 14 37 array get \$0-array;
#X obj 14 133 print;
#X obj 14 85 array size \$0-array;
#X obj 14 109 list, f 5;
#X obj 14 61 t b l;
#X text 59 112 Print index and contents of array, f 14;
#X obj 14 12 r \$0-printout;
#X connect 0 0 4 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 4 0 2 0;
#X connect 4 1 3 1;
#X connect 6 0 0 0;
#X restore 335 187 pd printer;
#X text 298 351 Author: Martin Heinze;
#X text 291 367 Last updated: 14.08.25;
#X obj 96 304 lop~ 10;
#X text 158 246 Arseq is a prototype abstraction for latent sequencing. It generates a small array (1-16 datapoints) with manually set values and outputs these consecutively as signals on each bang received through the first inlet either as constants or with a simple envelope applied (decay to 0)., f 41;
#X connect 1 0 17 0;
#X connect 2 0 3 0;
#X connect 3 0 2 1;
#X connect 3 0 5 0;
#X connect 4 0 5 1;
#X connect 5 0 32 0;
#X connect 7 0 18 0;
#X connect 12 0 31 0;
#X connect 14 0 15 0;
#X connect 15 0 36 0;
#X connect 16 0 19 0;
#X connect 16 0 18 1;
#X connect 17 0 8 0;
#X connect 18 0 1 1;
#X connect 19 0 41 0;
#X connect 21 0 23 0;
#X connect 21 0 33 0;
#X connect 22 0 34 0;
#X connect 23 0 24 0;
#X connect 23 1 24 1;
#X connect 24 0 25 0;
#X connect 25 0 26 0;
#X connect 27 0 28 0;
#X connect 31 0 17 1;
#X connect 32 0 1 0;
#X connect 33 0 2 0;
#X connect 33 1 7 0;
#X connect 41 0 1 1;
#X coords 0 -1 1 1 150 160 2 160 70;
